from django.db import models
from django.utils import timezone
class Student(models.Model):
    INSTITUTE_CHOICES = [
        ('–Ü–ê–î–£', '–Ü–ê–î–£'),
        ('–Ü–ê–†–î', '–Ü–ê–†–î'),
        ('–Ü–ë–Ü–î', '–Ü–ë–Ü–î'),
        ('–Ü–ì–î–ì', '–Ü–ì–î–ì'),
        ('–Ü–ì–°–ù', '–Ü–ì–°–ù'),
        ('–Ü–ù–ï–ú', '–Ü–ù–ï–ú'),
        ('–Ü–ï–°–ö', '–Ü–ï–°–ö'),
        ('–Ü–ú–Ü–¢', '–Ü–ú–Ü–¢'),
        ('–Ü–ü–ú–¢', '–Ü–ü–ú–¢'),
        ('–Ü–ö–ù–Ü', '–Ü–ö–ù–Ü'),
        ('–Ü–ö–¢–ê', '–Ü–ö–¢–ê'),
        ('–Ü–ö–¢–ï', '–Ü–ö–¢–ï'),
        ('–Ü–ü–ü–û', '–Ü–ü–ü–û'),
        ('–Ü–ü–ü–¢', '–Ü–ü–ü–¢'),
        ('–Ü–ú–§–ù', '–Ü–ú–§–ù'),
        ('–Ü–°–¢–†', '–Ü–°–¢–†'),
        ('–Ü–•–•–¢', '–Ü–•–•–¢'),
    ]
    
    COURSE_CHOICES = [(i, str(i)) for i in range(1, 7)]
    
    UKRAINIAN_REGIONS = [
        ('–í—ñ–Ω–Ω–∏—Ü—å–∫–∞', '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞'),
        ('–í–æ–ª–∏–Ω—Å—å–∫–∞', '–í–æ–ª–∏–Ω—Å—å–∫–∞'),
        ('–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞', '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞'),
        ('–î–æ–Ω–µ—Ü—å–∫–∞', '–î–æ–Ω–µ—Ü—å–∫–∞'),
        ('–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞', '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞'),
        ('–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞', '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞'),
        ('–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞'),
        ('–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞'),
        ('–ö–∏—ó–≤—Å—å–∫–∞', '–ö–∏—ó–≤—Å—å–∫–∞'),
        ('–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞', '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞'),
        ('–õ—É–≥–∞–Ω—Å—å–∫–∞', '–õ—É–≥–∞–Ω—Å—å–∫–∞'),
        ('–õ—å–≤—ñ–≤—Å—å–∫–∞', '–õ—å–≤—ñ–≤—Å—å–∫–∞'),
        ('–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞', '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞'),
        ('–û–¥–µ—Å—å–∫–∞', '–û–¥–µ—Å—å–∫–∞'),
        ('–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞', '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞'),
        ('–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞', '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞'),
        ('–°—É–º—Å—å–∫–∞', '–°—É–º—Å—å–∫–∞'),
        ('–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞'),
        ('–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞', '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞'),
        ('–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞', '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞'),
        ('–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞', '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞'),
        ('–ß–µ—Ä–∫–∞—Å—å–∫–∞', '–ß–µ—Ä–∫–∞—Å—å–∫–∞'),
        ('–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞', '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞'),
        ('–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞', '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞'),
        ('–ê–† –ö—Ä–∏–º', '–ê–† –ö—Ä–∏–º'),
    ]
    
    
    DORMITORY_NUMBERS = [(i, str(i)) for i in range(1, 24)]
    
    DORMITORY_ADDRESSES = {
        1: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ë–æ–π-–ñ–µ–ª–µ–Ω—Å—å–∫–æ–≥–æ –¢., 14",
        3: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ö–∞—Ä–ø–∏–Ω—Ü—è –Ü., 27",
        4: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –°–∞—Ö–∞—Ä–æ–≤–∞ –ê., –∞–∫–∞–¥., 25",
        5: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ—É–∫–∞—à–∞ –ú., 4",
        7: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ—É–∫–∞—à–∞ –ú., 1",
        8: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –°–∞—Ö–∞—Ä–æ–≤–∞ –ê., –∞–∫–∞–¥., 23",
        9: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ—É–∫–∞—à–∞ –ú., 2",
        10: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –í—ñ–¥–∫—Ä–∏—Ç–∞, 1",
        11: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ—É–∫–∞—à–∞ –ú., 5",
        12: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ–∞–∑–∞—Ä–µ–Ω–∫–∞ –Ñ., –∞–∫–∞–¥., 38",
        14: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ–∞–∑–∞—Ä–µ–Ω–∫–∞ –Ñ., –∞–∫–∞–¥., 40",
        15: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –õ–∞–∑–∞—Ä–µ–Ω–∫–∞ –Ñ., –∞–∫–∞–¥., 42",
        17: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü—É–ª—é—è –Ü., 33",
        18: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü–ª—É–∂–Ω–∏–∫–∞ –Ñ., 5",
        19: "—Å–º—Ç. –ë—Ä—é—Ö–æ–≤–∏—á—ñ, –≤—É–ª. –°—É—Ö–æ–º–ª–∏–Ω—Å—å–∫–æ–≥–æ –í., 18",
        20: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü—ñ–¥ –ì–æ–ª–æ—Å–∫–æ–º, 20",
        21: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü—É–ª—é—è –Ü., 33",
        22: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –í–æ–ª–æ–¥–∏–º–∏—Ä–∞ –í–µ–ª–∏–∫–æ–≥–æ, 57",
        23: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ü—ñ–¥ –ì–æ–ª–æ—Å–∫–æ–º, 23",
    }
        
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    full_name = models.CharField(max_length=200, verbose_name="–ü–Ü–ë —Å—Ç—É–¥–µ–Ω—Ç–∞")
    date_of_birth = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
    phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    institute = models.CharField(max_length=10, choices=INSTITUTE_CHOICES, blank=True, null=True, verbose_name="–ù–ù–Ü")
    course = models.IntegerField(choices=COURSE_CHOICES, blank=True, null=True, verbose_name="–ö—É—Ä—Å")
    enrollment_year = models.DateField(blank=True, null=True, verbose_name="–†—ñ–∫ –≤—Å—Ç—É–ø—É")
    graduation_year = models.DateField(blank=True, null=True, verbose_name="–†—ñ–∫ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è")
    passport_data = models.CharField(max_length=50, blank=True, null=True, verbose_name="–°–µ—Ä—ñ—è —Ç–∞ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞/ID")
    passport_issue_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –≤–∏–¥–∞—á—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞/ID")
    passport_issued_by = models.CharField(max_length=200, blank=True, null=True, verbose_name="–ö–∏–º –≤–∏–¥–∞–Ω–∏–π –ø–∞—Å–ø–æ—Ä—Ç/ID")
    country = models.CharField(max_length=50, default="–£–∫—Ä–∞—ó–Ω–∞", blank=True, null=True, verbose_name="–ö—Ä–∞—ó–Ω–∞")
    region = models.CharField(max_length=50, choices=UKRAINIAN_REGIONS, blank=True, null=True, verbose_name="–û–±–ª–∞—Å—Ç—å")
    city = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ú—ñ—Å—Ç–æ")
    address = models.CharField(max_length=200, blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è")
    dormitory_number = models.IntegerField(choices=DORMITORY_NUMBERS, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É")
    # dormitory_address = models.CharField(max_length=200, blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å–∞ –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É")  # üîπ –Ω–æ–≤–µ –ø–æ–ª–µ
    room_number = models.CharField(max_length=10, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏")
    contract_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä—É")
    contract_number = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É")
    contract_termination_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É")
    registration_consent = models.BooleanField(default=False, verbose_name="–ó–≥–æ–¥–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")
    registration_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø—Ä–æ–ø–∏—Å–∫–∏")
    registration_dormitory = models.IntegerField(choices=DORMITORY_NUMBERS, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
    deregistration_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –∑–Ω—è—Ç—Ç—è –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")
    notes = models.TextField(blank=True, null=True, verbose_name="–ü—Ä–∏–º—ñ—Ç–∫–∏")
    contract_number = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É")

    @property
    def dormitory_address(self):
        return self.DORMITORY_ADDRESSES.get(self.dormitory_number, "___")
        def __str__(self):
            return self.full_name
    
    def save(self, *args, **kwargs):
        if not self.contract_number and self.dormitory_number:
            # –±–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫
            current_year = timezone.now().year

            # —à—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ–≥–æ–≤—ñ—Ä —É —Ü—å–æ–º—É –≥—É—Ä—Ç–æ–∂–∏—Ç–∫—É –∑–∞ —Ü–µ–π —Ä—ñ–∫
            last_contract = Student.objects.filter(
                dormitory_number=self.dormitory_number,
                contract_number__startswith=f"{self.dormitory_number}-{current_year}"
            ).exclude(contract_number__isnull=True).exclude(contract_number="") \
            .order_by("-created_at").first()

            if last_contract:
                try:
                    last_seq = int(last_contract.contract_number.split("-")[-1])
                except (ValueError, IndexError):
                    last_seq = 0
            else:
                last_seq = 0

            new_seq = last_seq + 1

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä: <–≥—É—Ä—Ç–æ–∂–∏—Ç–æ–∫>-<—Ä—ñ–∫>-<–ø–æ—Ä—è–¥–∫–æ–≤–∏–π>
            self.contract_number = f"{self.dormitory_number}-{current_year}-{new_seq}"

        super().save(*args, **kwargs)


    class Meta:
        verbose_name = "–°—Ç—É–¥–µ–Ω—Ç"
        verbose_name_plural = "–°—Ç—É–¥–µ–Ω—Ç–∏"
        
        
        
    